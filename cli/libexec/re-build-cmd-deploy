#!/bin/bash

rebuild_prefix=`dirname $BASH_SOURCE`/../
. $rebuild_prefix/libexec/re-build-globals

function show_usage
{
    echo
    echo Usage: $rebuild_app_name deploy [OPTIONS] ENVIRONMENT[:TAG]
    echo
    echo Deploy environment from remote registry
    echo
    echo "  -h, --help          Print usage"
    echo
}

function do_deploy
{
    local NAME=$1
    local TAG=$2
    local REMOTE=`rebuild_get_remote`

    if [[ -z $REMOTE ]]; then
        handle_error "Remote not defined"
    fi

    report_progress "Deploying from $REMOTE..."

    local PUBLISHED_NAME=`rebuild_published_env_name $REMOTE $NAME $TAG`

    rebuild_verify_registry_is_accessible $PUBLISHED_NAME

    if ! rebuild_is_published $PUBLISHED_NAME; then
        handle_error "Environment $env_name:$env_tag does not exist in the registry"
    fi

    RC=0
    colorize_trace docker pull $PUBLISHED_NAME || RC=1

    if [[ ! $RC -eq 0 ]]; then
        echo >&2
        handle_error "Failed to deploy from $REMOTE"
    fi

    docker tag $PUBLISHED_NAME `rebuild_env_name $NAME`:$TAG | filter_debug
    docker rmi $PUBLISHED_NAME | filter_debug

    report_progress "Successfully deployed $NAME:$TAG"
}

args=$(getopt -l "help" -o "h" -- "$@")

eval set -- "$args"

while [ $# -ge 1 ]; do
    case "$1" in
        --)
            # No more options left.
            shift
            break
           ;;
        -h|--help)
            show_usage
            exit 0
            ;;
    esac

    shift
done

env_name=`rebuild_cmd_line_env_name $*`
env_tag=`rebuild_cmd_line_env_tag $*`

if [[ -z $env_name ]]; then
    handle_error "Environment name not specified"
fi

rebuild_verify_env_doesnt_exist $env_name $env_tag

do_deploy $env_name $env_tag
