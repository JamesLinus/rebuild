#!/bin/bash

rebuild_prefix=`dirname $BASH_SOURCE`/../
. $rebuild_prefix/libexec/re-build-globals

function show_usage
{
    echo
    echo Usage: $rebuild_app_name save [OPTIONS] ENVIRONMENT [FILE]
    echo
    echo Save local environment to file
    echo
    echo "  -h, --help               Print usage"
    echo
    echo "In case file name is omitted environment will be saved as <name>-<tag>${rebuild_saved_env_extention}"
    echo
}

function do_save
{
  local NAME=$1
  local TAG=$2
  local FILE=$3

  local RC=0
  { docker save `rebuild_env_name $NAME`:$TAG || RC=1; } | gzip > $FILE

  if [[ ! $RC -eq 0 ]]; then
      rm -rf $FILE
  fi

  return $RC
}

args=$(getopt -l "help" -o "h" -- "$@")

eval set -- "$args"

while [ $# -ge 1 ]; do
    case "$1" in
        --)
            # No more options left.
            shift
            break
           ;;
        -h|--help)
            show_usage
            exit 0
            ;;
    esac

    shift
done

if [[ -z ${1+x} ]]; then
    handle_error "Environment name not specified"
fi

env_name=`rebuild_cmd_line_env_name $*`
env_tag=`rebuild_cmd_line_env_tag $*`

if [[ -z $env_name ]]; then
    handle_error "Environment name not specified"
fi

if [[ -z ${2+x} ]]; then
  file_name=${env_name}-${env_tag}${rebuild_saved_env_extention}
else
  file_name=$2
fi

rebuild_verify_env_exists $env_name $env_tag

if rebuild_env_dirty $env_name $env_tag; then
    deliver_warning "Environment is modified, saving original version"
fi

RC=0
do_save $env_name $env_tag $file_name || RC=1

if [[ $RC -eq 0 ]]; then
    report_progress "Successfully saved environment $env_name:$env_tag to $file_name"
else
    report_progress "Failed to save environment $env_name:$env_tag to $file_name"
fi

exit $RC
