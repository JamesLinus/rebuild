#!/bin/bash

rebuild_prefix=`dirname $BASH_SOURCE`/../
. $rebuild_prefix/libexec/re-build-globals

function show_usage
{
    echo
    echo "Usage:"
    echo
    echo "  $rebuild_app_name run [OPTIONS] ENVIRONMENT[:TAG]"
    echo
    echo "      Interactive mode: opens shell in the specified enviroment"
    echo
    echo "  $rebuild_app_name run [OPTIONS] ENVIRONMENT[:TAG] -- COMMANDS"
    echo
    echo "      Scripting mode: runs COMMANDS in the specified environment"
    echo
    echo Run command in a local environment
    echo
    echo "  -h, --help          Print usage"
    echo
}

function run_cont_disposable
{
    local NAME=$1
    local TAG=$2
    local CMD="$3"

    local CONT_NAME=`rebuild_disposable_cont_name $NAME $TAG`
    local ENV_NAME=`rebuild_env_name $NAME`
    local TTY_PARAM=

    if [[ -t 0 ]]; then
        TTY_PARAM=-t
    fi

    docker run                                           \
           -i $TTY_PARAM --rm                            \
           --name $CONT_NAME                             \
           --hostname `rebuild_cont_hostname $NAME $TAG` \
           `rebuild_cont_run_settings`                   \
           $ENV_NAME:$TAG                                \
           "$CMD"
}

args=$(getopt -l "help" -o "h" -- "$@")

eval set -- "$args"

while [ $# -ge 1 ]; do
    case "$1" in
        --)
            # No more options left.
            shift
            break
           ;;
        -h|--help)
            show_usage
            exit 0
            ;;
    esac

    shift
done

env_name=`rebuild_cmd_line_env_name $*`
env_tag=`rebuild_cmd_line_env_tag $*`

if [[ -z $env_name ]]; then
    handle_error "Environment name not specified"
fi

shift

rebuild_verify_env_exists $env_name $env_tag

if rebuild_env_dirty $env_name $env_tag; then
    deliver_warning "Environment is modified, running original version"
fi

run_cont_disposable $env_name $env_tag "$*"
