#!/bin/bash

rebuild_prefix=`dirname $BASH_SOURCE`/../
. $rebuild_prefix/libexec/re-build-globals

function show_usage
{
    echo
    echo Usage: $rebuild_app_name create [OPTIONS] ENVIRONMENT
    echo
    echo Create a new environment
    echo
    echo "  -b NAME, --base NAME     Base docker image from The Docker Hub"
    echo "  -f NAME, --basefile NAME Base file"
    echo "  -h, --help               Print usage"
    echo
}

function env_dockerfile
{
    local NAME=$1
    echo `env_ctx_directory`/Dockerfile
}

function generate_dockerfile
{
    local DIR=$1
    local NAME=$2
    local BASE_IMG=$3
    local BASE_FILE=$4

    if [[ -n $BASE_IMG ]]; then
      FROM_TEXT="FROM $BASE_IMG"
      ADD_TEXT=
    else
      FROM_TEXT="FROM scratch"
      ADD_TEXT="ADD $BASE_FILE /"
    fi

    cat >$DIR/Dockerfile <<EOF
############################################################
# Dockerfile for environment $NAME
############################################################

$FROM_TEXT
$ADD_TEXT
LABEL $rebuild_env_label=true

COPY re-build-env-prepare re-build-bootstrap-utils rebuild.rc /rebuild/
COPY re-build-entry-point $rebuild_env_entrypoint

# sync after chmod is needed because of an AuFS problem described in:
# https://github.com/docker/docker/issues/9547

RUN chown root:root /rebuild/re-build-env-prepare /rebuild/re-build-bootstrap-utils /rebuild/rebuild.rc && \
    chmod 700 $rebuild_env_entrypoint /rebuild/re-build-env-prepare && \
    sync && \
    chmod 644 /rebuild/rebuild.rc /rebuild/re-build-bootstrap-utils && \
    sync && \
    /rebuild/re-build-env-prepare

ENTRYPOINT ["$rebuild_env_entrypoint"]

EOF
}

function build_image
{
    local DIR=$1
    local NAME=$2
    local TAG=$3

    local RC=0

    report_progress "Building environment..."

    colorize_trace      \
        docker build    \
            --force-rm  \
            --tag `rebuild_env_name $NAME`:$TAG \
            $DIR || RC=1

    if [[ ! $RC -eq 0 ]]; then
        rebuild_delete_untagged_images
    fi

    return $RC
}

base_img=
base_file=

args=$(getopt -l "base:,basefile:,help" -o "b:f:h" -- "$@")

eval set -- "$args"

while [ $# -ge 1 ]; do
    case "$1" in
        --)
            # No more options left.
            shift
            break
           ;;
        -b|--base)
            base_img="$2"
            shift
            ;;
        -f|--basefile)
            base_file="$2"
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
    esac

    shift
done

if [[ -z $base_img && -z $base_file ]]; then
    handle_error "Environment base not specified"
fi

if [[ -n $base_img && -n $base_file ]]; then
    handle_error "Exactly one environment base must be specified"
fi

if [[ -n $base_file && ! -f $base_file ]]; then
    handle_error "Base file $base_file does not exist"
fi

if [[ -z ${1+x} ]]; then
    handle_error "Environment name not specified"
fi

env_name=`rebuild_cmd_line_env_name $*`
env_tag=`rebuild_cmd_line_env_tag_exact $*`

if [[ -z $env_name ]]; then
    handle_error "Environment name not specified"
fi

if [[ -n $env_tag ]]; then
    handle_error "Environment tag must not be specified"
fi

env_tag=$rebuild_initial_tag

rebuild_verify_env_doesnt_exist $env_name $env_tag

ENV_CTX_DIR=`env_ctx_directory $env_name`
rm -rf $ENV_CTX_DIR
mkdir -p $ENV_CTX_DIR
cp $rebuild_prefix/libexec/re-build-entry-point \
   $rebuild_prefix/libexec/re-build-env-prepare \
   $rebuild_prefix/libexec/re-build-bootstrap-utils \
   $rebuild_prefix/libexec/rebuild.rc \
   $ENV_CTX_DIR

BASE_FILE_IN_CTX=

if [[ -n $base_file ]]; then
  BASE_FILE_IN_CTX=`basename $base_file`
  cp $base_file $ENV_CTX_DIR/$BASE_FILE_IN_CTX
fi

generate_dockerfile $ENV_CTX_DIR $env_name "$base_img" "$BASE_FILE_IN_CTX"

RC=0
build_image $ENV_CTX_DIR $env_name $env_tag || RC=1

do_cleanup "rm -rf $ENV_CTX_DIR"

if [[ $RC -eq 0 ]]; then
    report_progress "Successfully created $env_name:$env_tag"
else
    report_progress "Failed to create $env_name:$env_tag"
fi

exit $RC
